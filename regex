using System.Text;
using System.Text.RegularExpressions;

namespace RegexValidation
{
    static class Validation
{
    //validar número de telefone

    public static Regex RgexCelular = new Regex("^([1-9][0-9]) 9?[^01234 ]{1}[0-9]{3}-?[0-9]{4}$");
    public static Regex RgexFixo = new Regex("[(][1-9]{2}[)][ ]?[^06789][0-9]{3}([-]|| )?[0-9]{4}");


    public static bool validarTelefone(string[] value)
    {
        bool valido = false;

        foreach (string fone in value)
        {
            Regex numeric = new Regex(@"([^\d ]+)");

            string aaa = numeric.Replace(fone, "");

            //Verifica se o telefone veio vazio.
            if (aaa.Trim() == "")
                continue;

            //Verificar se os números se repetem
            Regex repeat = new Regex(@"^(\d)\1+$");
            if (repeat.IsMatch(aaa.Replace(" ", "")))
                continue;

            string ddd = "";
            string tel = "";

            if (aaa.Contains(" "))
            {
                ddd = aaa.Split(' ')[0];
                tel = aaa.Split(' ')[1];

                if (aaa.Length <= 9)
                    continue;

            }

            string telefone_final = String.Format("{0} {1}", ddd, tel);


            valido = true;
        }


        if (!valido)
            return false;


        return true;
    }
}
//validar email
class Email
{
        public static bool EmailValidate(string email)
    {

        return Regex.IsMatch(email, @"\A[a-z0-9]+([-._][a-z0-9]+)*@([a-z0-9]+(-[a-z0-9]+)*\.)+[a-z]{2,4}\z")
            && Regex.IsMatch(email, @"^(?=.{1,64}@.{4,64}$)(?=.{6,100}$).*");
    }
}
//validar cep
class Cep
{
    public static bool CEPValidate(string value)
    {
        Regex RgexData = new Regex(@"([\d]{5}-?[\d]{3})");
        if (RgexData.IsMatch(value))
            return false;
        return true;
    }
}
//validar cpf
class CPF
{
    public static string IsCpf(string cpf)
    {
        System.Text.RegularExpressions.Regex regexNumeros = new System.Text.RegularExpressions.Regex("[^0-9]");
        int[] multiplicador1 = new int[9] { 10, 9, 8, 7, 6, 5, 4, 3, 2 };
        int[] multiplicador2 = new int[10] { 11, 10, 9, 8, 7, 6, 5, 4, 3, 2 };
        string tempCpf;
        string digito;
        int soma;
        int resto;

        if (cpf.Length != 11)
            return "";

        switch (cpf)
        {
            case "11111111111":
            case "22222222222":
            case "33333333333":
            case "44444444444":
            case "55555555555":
            case "66666666666":
            case "77777777777":
            case "88888888888":
            case "99999999999":
            case "00000000000":
                return "";
        }

        tempCpf = cpf.Substring(0, 9);
        soma = 0;

        for (int i = 0;i < 9;i++)
            soma += int.Parse(tempCpf[i].ToString()) * multiplicador1[i];
        resto = soma % 11;
        if (resto < 2)
            resto = 0;
        else
            resto = 11 - resto;
        digito = resto.ToString();
        tempCpf = tempCpf + digito;
        soma = 0;
        for (int i = 0;i < 10;i++)
            soma += int.Parse(tempCpf[i].ToString()) * multiplicador2[i];
        resto = soma % 11;
        if (resto < 2)
            resto = 0;
        else
            resto = 11 - resto;
        digito = digito + resto.ToString();

        return cpf.EndsWith(digito) ? cpf : "";
    }
}
//remover acentos
class SemAcento
{
    public static string RemoveAccents(this string text)
    {
        StringBuilder sbReturn = new StringBuilder();
        var arrayText = text.Normalize(NormalizationForm.FormD).ToCharArray();
        foreach (char letter in arrayText)
        {
            if (System.Globalization.CharUnicodeInfo.GetUnicodeCategory(letter) != System.Globalization.UnicodeCategory.NonSpacingMark)
                sbReturn.Append(letter);
        }
        return sbReturn.ToString();
    }
}

}
